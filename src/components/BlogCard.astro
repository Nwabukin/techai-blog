---
import type { ImageMetadata } from 'astro';

interface Author {
  name: string;
  title?: string;
  avatar?: string;
}

interface Props {
  title: string;
  description: string;
  pubDate: Date;
  author: Author;
  slug: string;
  image?: string | ImageMetadata;
  readingTime?: string;
  category?: string;
  class?: string;
  'data-category'?: string;
}

const {
  title,
  description,
  pubDate,
  author,
  slug,
  image,
  readingTime = '5 min read',
  category = 'Technology',
  class: className,
  'data-category': dataCategory,
} = Astro.props;

const formattedDate = pubDate.toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
});

// Get image source depending on type
const imageSource = typeof image === 'string' ? image : image?.src;
---

<article
  class:list={[
    'blog-card bg-white dark:bg-secondary-800 rounded-2xl shadow-sm overflow-hidden hover:shadow-md transition-all duration-300',
    className,
  ]}
  data-category={dataCategory}
>
  {
    imageSource && (
      <div class="aspect-video w-full overflow-hidden rounded-t-2xl">
        <img src={imageSource} alt={title} class="w-full h-full object-cover" />
      </div>
    )
  }
  <div class="p-6">
    {
      category && (
        <span class="inline-block px-3 py-1 rounded-full text-xs font-medium bg-primary-50 dark:bg-primary-900/20 text-primary-600 dark:text-primary-400 mb-4">
          {category}
        </span>
      )
    }
    <h2 class="text-xl font-bold text-secondary-900 dark:text-white mb-2">
      <a
        href={`/blog/${slug}`}
        class="hover:text-primary-600 dark:hover:text-primary-400 transition-colors"
      >
        {title}
      </a>
    </h2>
    <p class="text-secondary-600 dark:text-secondary-400 mb-4 line-clamp-2">
      {description}
    </p>
    <div
      class="flex items-center justify-between text-sm text-secondary-600 dark:text-secondary-400"
    >
      <div class="flex items-center gap-2">
        {
          author.avatar && (
            <img src={author.avatar} alt={author.name} class="w-6 h-6 rounded-full" />
          )
        }
        <span>{author.name}</span>
        {author.title && <span class="text-xs">({author.title})</span>}
      </div>
      <div class="flex items-center gap-2">
        <time datetime={pubDate.toISOString()}>{formattedDate}</time>
        <span>Â·</span>
        <span>{readingTime}</span>
      </div>
    </div>
  </div>
</article>
