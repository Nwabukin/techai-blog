<div
  id="pwa-install-prompt"
  class="fixed bottom-4 left-4 right-4 md:left-auto md:right-4 md:w-96 bg-white dark:bg-gray-800 p-4 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 hidden"
>
  <div class="flex items-start justify-between">
    <div class="flex-1">
      <h3 class="text-lg font-semibold mb-2">Install Tech AI Blog</h3>
      <p class="text-gray-600 dark:text-gray-300 text-sm">
        Install our app for a better experience and offline access
      </p>
    </div>
    <button
      id="pwa-close"
      class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
    >
      <span class="sr-only">Close</span>
      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>
  </div>
  <div class="mt-4 flex space-x-3">
    <button
      id="pwa-install"
      class="flex-1 bg-primary text-white px-4 py-2 rounded-lg hover:bg-primary/90 transition-colors"
    >
      Install
    </button>
    <button
      id="pwa-cancel"
      class="flex-1 bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 px-4 py-2 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors"
    >
      Not now
    </button>
  </div>
</div>

<script>
  interface BeforeInstallPromptEvent extends Event {
    readonly platforms: string[];
    readonly userChoice: Promise<{
      outcome: 'accepted' | 'dismissed';
      platform: string;
    }>;
    prompt(): Promise<void>;
  }

  let deferredPrompt: BeforeInstallPromptEvent | null = null;
  const installPrompt = document.getElementById('pwa-install-prompt');
  const installButton = document.getElementById('pwa-install');
  const closeButton = document.getElementById('pwa-close');
  const cancelButton = document.getElementById('pwa-cancel');

  // Check if the PWA has already been installed
  const isPWAInstalled = (): boolean => {
    return (
      window.matchMedia('(display-mode: standalone)').matches ||
      (navigator as Navigator & { standalone?: boolean }).standalone ||
      document.referrer.includes('android-app://')
    );
  };

  if (!isPWAInstalled()) {
    window.addEventListener('beforeinstallprompt', (e) => {
      e.preventDefault();
      deferredPrompt = e as BeforeInstallPromptEvent;
      installPrompt?.classList.remove('hidden');
    });

    installButton?.addEventListener('click', async () => {
      if (deferredPrompt) {
        deferredPrompt.prompt();
        const { outcome } = await deferredPrompt.userChoice;
        if (outcome === 'accepted') {
          console.log('PWA installed');
        }
        deferredPrompt = null;
        installPrompt?.classList.add('hidden');
      }
    });

    const hidePrompt = () => {
      installPrompt?.classList.add('hidden');
      localStorage.setItem('pwa-prompt-dismissed', 'true');
    };

    closeButton?.addEventListener('click', hidePrompt);
    cancelButton?.addEventListener('click', hidePrompt);
  }
</script>

